generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "AccountToUser")

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "SessionToUser")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          Enum_RoleName @default(USER)
  accounts      Account[]     @relation(name: "AccountToUser")
  sessions      Session[]     @relation(name: "SessionToUser")
  deleted       Boolean       @default(false)
  eneabled      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  profile       Profile?
}

model Profile {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  bio       String?
  image     String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
}

model Enterprise{
  id String @id @default(cuid())
  name String
  document String 
  phone String 
  address String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  employees Employee[]
}

model Employee{
  id        String  @id @default(cuid())
  name String
  document String
  phone String 
  address String
  salary String
  mail String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  enterprise Enterprise @relation(fields: [enterpriseId], references: [id])
  enterpriseId String
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Enum_RoleName {
  USER
  ADMIN
}

